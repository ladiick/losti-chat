import {createApi, fetchBaseQuery} from '@reduxjs/toolkit/query/react'import {HOST} from "./HOST";import {logOut, setUserAccessToken} from "../../redux/slices/userSlice";// export const dialogsAPI = createApi({//     reducerPath: 'dialogsAPI',//     baseQuery: fetchBaseQuery({//         baseUrl: `http://${HOST}/api/v1`,//         prepareHeaders: (headers,{getState}) => {//             const token = getState().user.tokens.access//             if(token) {//                 return headers.set('Authorization', `JWT ${token}`)//             }//         }//     }),//     endpoints: (build) => ({//         getDialogs: build.query({//             query: (arg) => ({//                 url: `/dialogs/`,//                 validateStatus: (response, result) => {//                     console.log('Ответ',response.status)//                     console.log('Резалт',result)//                 }//             }),////         }),////     })// })const baseQuery = fetchBaseQuery({    baseUrl: `http://${HOST}/api/v1`,    credentials: 'include',    prepareHeaders: (headers, { getState }) => {        const token = getState().user.tokens.access        if (token) {            headers.set("authorization", `JWT ${token}`)        }        return headers    }})const baseQueryWithReauth = async (args, api, extraOptions) => {    let result = await baseQuery(args, api, extraOptions)    if (result?.error?.originalStatus === 401) {        console.log('sending refresh token')        // send refresh token to get new access token        const refreshResult = await baseQuery('/token/refresh/', api, extraOptions)        console.log(refreshResult)        if (refreshResult?.data) {            api.dispatch(setUserAccessToken(refreshResult?.data))            // retry the original query with new access token            result = await baseQuery(args, api, extraOptions)        } else {            api.dispatch(logOut())        }    }    return result}export const apiSlice = createApi({    baseQuery: baseQueryWithReauth,    endpoints: builder => ({})})// export const {useGetDialogsQuery} = dialogsAPI